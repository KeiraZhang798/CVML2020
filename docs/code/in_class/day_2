// Text Rain Assignment (BLANK TEMPLATE)

// Goal: Re-create the "Text Rain" interactive installation by Camille Utterback and Romy Achituv, but with your own personal twist.

// Guidelines: In p5.js, write a program where letters that descend from the top of the screen rest on dark parts of a scene captured in real-time by a webcam. When letters reach the bottom of the screen, their position reset to the top of the screen.

// Personalize it: The original installation used the poem "Talk, You" by Evan Zimroth as a source for their falling letters. Use your own text source. Think about the functionality/experience of this installation, and how that might affect the reading of the text.

// Below, you'll find some pseudo-code (and some actual code) to help you get started with this assignment. If some coding concepts in don't look familiar, I encourage you to investigate them!

/* Note: Comments like these will be where you should answer a question or insert your own code */

// Note: If you find that all the comments in this file make it hard to read/write your code, I recommend working off of this "blank" template here: https://editor.p5js.org/drosman/sketches/Wl_I1YgT The code is the same as this prompt, just without all the explanatory comments.

// One last thing: there's no single correct way to solve this problem!

// Onto the code...

let capture;
let fallingLetters = [];
let w = 1080;
let h = 480;
let threshold = 80;


function setup() {
  // set up video
  capture = createCapture(VIDEO);
  capture.hide();
  createCanvas(1080, 480);
    
  let sourceText = "I've seen things you people wouldn't believe"
  
  
  let x = 0;
  
  let xSpacing = 10;
  
  for(let char of sourceText) 
  {let newChar=new FallingLetter (char, x, random(80));
  
  fallingLetters.push(newChar); 
  x+=20;

    /* your code */
    
  }
  
  /* Challenge: Rewrite the loop above using a traditional for-loop structure?) Make sure to comment it out so it doesn't interfere with your code */
}


function draw() {
  background(255);
   for(let char of fallingLetters) {
    
  text(char.c, char.x, char.y);
  char.y++;
   }
  
  push();
    // flip the video so that it is mirrored correctly
    /* translate(?, ?); */
    /* scale(?, ?); */
    image(capture, 0, 0, w/2, h);
    translate(w,0); 
    scale(-1.0,1.0);   
    image(capture, 0, 0, w/2, h);
  pop();
  
  capture.loadPixels(); // load pixel data from the webcam
  
  /*
   for(loop through the fallingLetters array) {
   
     while(current FallingLetter not at top of Screen && FallingLetter               encounters a dark part of the webcam feed) {
    
        // move the FallingLetter up
    
      }
    
     if(the FallingLetter has reached the bottom of the screen) {
    
        // reset the FallingLetter to the top of the screen
    
     } else {
    
      move the FallingLetter down
      
     }
   }
   */
    
  // based on the calculations we did above, draw the fallingLetters to
  // the screen at their new y-positions
  for(let fl of fallingLetters) {
    fill(0);
    text(fl.char, fl.x, fl.y);
  }  
}

function getBrightness(_pixels, _i) {
  
  let currFallingLetter = fallingLetters[_i];
  let index = ((w-currFallingLetter.x) + (currFallingLetter.y*w))*4;
  
  let r = _pixels[index];
  /* let g = ?; */
  /* let b = ?; */
  
  /* let colorTotal = ?; */
  /* let brightness = ?; */
  
  // once we've calculated the brightness, return that value.
  return brightness;
}

class FallingLetter {
  
  constructor(_char, _x, _y) {
    
    this.char = _char;
    this.x = _x;
    this.y = _y;
  }  
}
